{"version":3,"sources":["SharedUtils.js","PlayNumber.js","PlayAgain.js","StarsDisplay.js","useGameState.js","App.js","serviceWorker.js","index.js"],"names":["colors","available","used","wrong","candidate","utils","sum","arr","reduce","acc","curr","range","min","max","Array","from","length","_","i","random","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push","PlayNumber","number","status","onNumClick","key","style","backgroundColor","className","onClick","PlayAgain","props","color","gameStatus","StarDisplay","count","map","starId","useGameState","useState","stars","setStars","availableNums","setAvailabelNums","candidateNums","setCanditateNums","secondsLeft","setSecondsLeft","useEffect","timerId","setTimeout","clearTimeout","setGameState","newCandidateNums","newAvalNums","filter","n","includes","Game","candidatesAreWrong","onNumberClick","currStatus","cn","startNewGame","num","App","gameId","setGameId","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d9f8bd1f.chunk.js","sourcesContent":["// Color Theme\r\nconst colors = {\r\n    available: 'lightgray',\r\n    used: 'lightgreen',\r\n    wrong: 'lightcoral',\r\n    candidate: 'deepskyblue',\r\n  };\r\n\r\n// Math science\r\nconst utils = {\r\n    // Sum an array\r\n    sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\r\n\r\n    // create an array of numbers between min and max (edges included)\r\n    range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\r\n\r\n    // pick a random number between min and max (edges included)\r\n    random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n\r\n    // Given an array of numbers and a max...\r\n    // Pick a random sum (< max) from the set of all available sums in arr\r\n    randomSumIn: (arr, max) => {\r\n        const sets = [[]];\r\n        const sums = [];\r\n        for (let i = 0; i < arr.length; i++) {\r\n            for (let j = 0, len = sets.length; j < len; j++) {\r\n                const candidateSet = sets[j].concat(arr[i]);\r\n                const candidateSum = utils.sum(candidateSet);\r\n                if (candidateSum <= max) {\r\n                    sets.push(candidateSet);\r\n                    sums.push(candidateSum);\r\n                }\r\n            }\r\n        }\r\n        return sums[utils.random(0, sums.length - 1)];\r\n    },\r\n};\r\n\r\nexport {colors, utils};","import React from 'react'\r\nimport { colors } from './SharedUtils'\r\nexport function PlayNumber({ number, status, onNumClick }) {\r\n    return (\r\n        <button key={number}\r\n            style={{ backgroundColor: colors[status] }}\r\n            className=\"number\"\r\n            onClick={() => { onNumClick(number, status) }}>\r\n            {number}\r\n        </button>);\r\n}\r\n\r\nexport default PlayNumber;","import React from 'react';\r\n\r\nexport function PlayAgain(props) {\r\n    return (\r\n        <div className=\"game-done\">\r\n            <div className=\"message\" style={{ color: props.gameStatus === 'lost' ? 'red' : 'green' }}>\r\n                {props.gameStatus === 'lost' ? 'Game Over' : 'Nice'}\r\n            </div>\r\n            <button onClick={props.onClick}>Play Again</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayAgain;","import React from 'react';\r\nimport { utils } from './SharedUtils';\r\n\r\nexport function StarDisplay(props) {\r\n    return (\r\n        <>\r\n            {utils.range(1, props.count).map(starId =>\r\n                <div key={starId} className=\"star\" />\r\n            )}\r\n        </>\r\n    );\r\n}","import { useEffect, useState } from 'react';\r\nimport { utils } from './SharedUtils';\r\n\r\nexport const useGameState = () => {\r\n    const [stars, setStars] = useState(utils.random(1, 9));\r\n    const [availableNums, setAvailabelNums] = useState(utils.range(1, 9));\r\n    const [candidateNums, setCanditateNums] = useState([]);\r\n    const [secondsLeft, setSecondsLeft] = useState(10);\r\n\r\n    useEffect(() => {\r\n        // inz side effects\r\n        if (secondsLeft > 0 && availableNums.length > 0) {\r\n            const timerId = setTimeout(() => {\r\n                setSecondsLeft(secondsLeft - 1);\r\n            }, 1000);\r\n            // clean up side effect\r\n            return () => clearTimeout(timerId);\r\n        }\r\n    });\r\n\r\n    const setGameState = (newCandidateNums) => {\r\n        if (utils.sum(newCandidateNums) !== stars) {\r\n            setCanditateNums(newCandidateNums);\r\n        } else {\r\n            const newAvalNums = availableNums.filter(n => !newCandidateNums.includes(n));\r\n            // redraw stars\r\n            setStars(utils.randomSumIn(newAvalNums, 9));\r\n            setAvailabelNums(newAvalNums);\r\n            setCanditateNums([]);\r\n        }\r\n    }\r\n\r\n    return { stars, availableNums, candidateNums, secondsLeft, setGameState };\r\n}\r\n\r\nexport default useGameState;","import React, { useState } from 'react';\nimport './App.css';\nimport PlayNumber from './PlayNumber';\nimport PlayAgain from './PlayAgain'\nimport { utils } from './SharedUtils';\nimport { StarDisplay } from './StarsDisplay';\nimport { useGameState } from './useGameState'\n\nfunction Game(props) {\n  const {\n    stars,\n    availableNums,\n    candidateNums,\n    secondsLeft,\n    setGameState,\n  } = useGameState();\n\n  const candidatesAreWrong = utils.sum(candidateNums) > stars;\n\n  const gameStatus = availableNums.length === 0 ? 'won' : secondsLeft === 0 ? 'lost' : 'active'\n\n  const numberStatus = (num) => {\n    if (!availableNums.includes(num)) {\n      return 'used';\n    }\n    if (candidateNums.includes(num)) {\n      return candidatesAreWrong ? 'wrong' : 'candidate';\n    }\n    return 'available';\n  }\n\n  const onNumberClick = (number, currStatus) => {\n    if (gameStatus !== 'active' || currStatus === 'used') {\n      return;\n    }\n\n    const newCandidateNums = currStatus === 'available' ? candidateNums.concat(number) : candidateNums.filter(cn => cn !== number);\n\n    setGameState(newCandidateNums);\n\n    // Alternate way to reset is unmount and mount the cpomplete game again!! Check the onClick used in <PlayAgain  ..../>\n\n    // const resetGame = () => {\n    //   setStars(utils.random(1, 9));\n    //   setAvailabelNums(utils.range(1, 9));\n    //   setCanditateNums([]);\n    //   setSecondsLeft(10);\n    // };\n  };\n\n  return (\n    <div className=\"game\">\n      <div className=\"help\">\n        Pick 1 or more numbers that sum to the number of stars\n    </div>\n      <div className=\"body\">\n        <div className=\"left\">\n          {gameStatus !== 'active' ?\n            (<PlayAgain onClick={props.startNewGame} gameStatus={gameStatus} />) : (<StarDisplay count={stars} />)}\n        </div>\n        <div className=\"right\">\n          {utils.range(1, 9).map(number =>\n            <PlayNumber\n              key={number}\n              status={numberStatus(number)}\n              onNumClick={onNumberClick}\n              number={number} />\n          )}\n        </div>\n      </div>\n      <div className=\"timer\">Time Remaining: {secondsLeft}</div>\n    </div>\n  );\n}\n\n\nexport function App() {\n  const [gameId, setGameId] = useState(1);\n  // Unmount and then mount the new game\n  return (\n    <Game key={gameId} startNewGame={() => setGameId(gameId + 1)} />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}